#!/usr/bin/env node

require("dotenv").config({ path: process.cwd() + "/.env" });
const fs = require("fs");
const path = require("path");
const axios = require("axios");
const { program } = require("commander");
const readline = require("readline");
const OpenAI = require("openai");

// Ki·ªÉm tra API key
const DALL_E_API_KEY = process.env.DALL_E_API_KEY;
if (!DALL_E_API_KEY) {
  console.error("L·ªói: Thi·∫øu DALL_E_API_KEY trong file .env");
  process.exit(1);
}

// C·∫•u h√¨nh ch∆∞∆°ng tr√¨nh CLI
program
  .name("generate-image")
  .description("T·∫°o ·∫£nh s·ª≠ d·ª•ng DALL-E 3 API")
  .version("1.0.0");

program
  .option("-p, --prompt <prompt>", "Prompt m√¥ t·∫£ ·∫£nh c·∫ßn t·∫°o")
  .option(
    "-s, --style <style>",
    "Phong c√°ch ·∫£nh (vector, icon, realistic, cartoon, app-icon, ui-icons)",
    "natural"
  )
  .option("-o, --output <output>", "ƒê∆∞·ªùng d·∫´n l∆∞u ·∫£nh output", "./output.png")
  .option(
    "-v, --vector",
    "T·ªëi ∆∞u prompt ƒë·ªÉ t·∫°o ·∫£nh phong c√°ch vector/icon",
    false
  )
  .option("-i, --icon", "T·ªëi ∆∞u prompt ƒë·ªÉ t·∫°o icon", false)
  .option("-a, --app-icon", "T·ªëi ∆∞u prompt ƒë·ªÉ t·∫°o icon ·ª©ng d·ª•ng", false)
  .option("-u, --ui-icons", "T·ªëi ∆∞u prompt ƒë·ªÉ t·∫°o b·ªô UI icons", false)
  .option("-y, --yes", "B·ªè qua c·∫£nh b√°o chi ph√≠", false)
  .option(
    "-q, --quality <quality>",
    "Ch·∫•t l∆∞·ª£ng ·∫£nh (standard, hd)",
    "standard"
  )
  .option(
    "-m, --model <model>",
    "Model DALL-E (dall-e-3, dall-e-2)",
    "dall-e-3"
  )
  .option("-f, --from-image <image>", "T·∫°o ·∫£nh t·ª´ ·∫£nh input");

program.parse();
const options = program.opts();

// Ki·ªÉm tra tham s·ªë b·∫Øt bu·ªôc
if (!options.prompt && !options.fromImage) {
  console.error("L·ªói: B·∫°n ph·∫£i cung c·∫•p prompt ho·∫∑c ·∫£nh input");
  program.help();
}

// Kh·ªüi t·∫°o OpenAI client
const openai = new OpenAI({
  apiKey: process.env.DALL_E_API_KEY,
});

// H√†m hi·ªÉn th·ªã c·∫£nh b√°o chi ph√≠ v√† x√°c nh·∫≠n
async function costWarningPrompt() {
  if (options.yes) {
    return true;
  }

  console.log("\n‚ö†Ô∏è C·∫¢NH B√ÅO CHI PH√ç ‚ö†Ô∏è");
  console.log(
    "M·ªói ·∫£nh t·∫°o b·ªüi DALL-E 3 c√≥ chi ph√≠ kho·∫£ng 0,08$ (1.024x1.024 pixels)"
  );
  console.log(
    "Vui l√≤ng c√¢n nh·∫Øc tr∆∞·ªõc khi t·∫°o ·∫£nh v√† ch·ªâ t·∫°o khi th·ª±c s·ª± c·∫ßn thi·∫øt."
  );

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise((resolve) => {
    rl.question("B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/n): ", (answer) => {
      rl.close();
      resolve(answer.toLowerCase() === "y");
    });
  });
}

// T·ªëi ∆∞u prompt cho ·∫£nh vector
function optimizeVectorPrompt(prompt) {
  return `Create a minimalist vector illustration with simple clean lines, flat design style, using only essential shapes. The illustration should show: ${prompt}. Make it suitable for SVG conversion, with clean outlines, limited color palette, and no gradients or complex details.`;
}

// T·ªëi ∆∞u prompt cho icon
function optimizeIconPrompt(prompt) {
  return `Create a simple, minimalist icon representing ${prompt}. Use flat design with clean outlines, minimal details, solid colors, and simple shapes. The icon should be recognizable at small sizes and suitable for UI design. Avoid gradients, shadows, and complex details. Use a limited color palette with strong contrast.`;
}

// T·ªëi ∆∞u prompt cho app icon
function optimizeAppIconPrompt(prompt) {
  return `Design a modern app icon for ${prompt}, using a simple and recognizable symbol. The icon should follow material design or iOS guidelines with a limited color palette (2-3 colors maximum). Create clean shapes with strong silhouettes that remain recognizable at small sizes. Avoid text, intricate details, and overly complex imagery.`;
}

// T·ªëi ∆∞u prompt cho UI icon set
function optimizeUIIconsPrompt(prompt) {
  return `Create a consistent set of minimal UI icons for ${prompt}. Icons should be simple, single-color (monochrome) line/solid style, uniform thickness, with clean geometric shapes. Design them to work well at small sizes (24x24px) with clear silhouettes. Ensure consistent style across all icons.`;
}

// Ch·ªçn t·ªëi ∆∞u prompt d·ª±a tr√™n c√°c options
async function optimizePrompt(prompt) {
  if (options.vector) {
    return optimizeVectorPrompt(prompt);
  } else if (options.icon) {
    return optimizeIconPrompt(prompt);
  } else if (options.appIcon) {
    return optimizeAppIconPrompt(prompt);
  } else if (options.uiIcons) {
    return optimizeUIIconsPrompt(prompt);
  } else if (options.style === "vector") {
    return optimizeVectorPrompt(prompt);
  } else if (options.style === "icon") {
    return optimizeIconPrompt(prompt);
  } else if (options.style === "app-icon") {
    return optimizeAppIconPrompt(prompt);
  } else if (options.style === "ui-icons") {
    return optimizeUIIconsPrompt(prompt);
  }

  return prompt;
}

// H√†m t·∫°o ·∫£nh t·ª´ prompt
async function generateImageFromPrompt(prompt, style, quality, model) {
  try {
    console.log("üé® ƒêang t·∫°o ·∫£nh v·ªõi DALL-E...");
    console.log("üìù Prompt:", prompt);

    const response = await openai.images.generate({
      model: model,
      prompt: prompt,
      n: 1,
      size: "1024x1024",
      quality: quality,
      response_format: "url",
    });

    const imageUrl = response.data[0].url;

    // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
    const outputDir = path.dirname(options.output);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // T·∫£i v√† l∆∞u ·∫£nh
    const imageResponse = await fetch(imageUrl);
    const buffer = await imageResponse.arrayBuffer();
    fs.writeFileSync(options.output, Buffer.from(buffer));

    console.log("‚úÖ ƒê√£ t·∫°o ·∫£nh th√†nh c√¥ng!");
    console.log("üìç ·∫¢nh ƒë∆∞·ª£c l∆∞u t·∫°i:", options.output);

    return imageUrl;
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o ·∫£nh:", error.message);
    process.exit(1);
  }
}

// H√†m t·∫£i ·∫£nh t·ª´ URL v√† l∆∞u v√†o file
async function downloadImage(url, outputPath) {
  try {
    console.log("ƒêang t·∫£i ·∫£nh...");

    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    const dir = path.dirname(outputPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    const response = await axios({
      method: "GET",
      url: url,
      responseType: "stream",
    });

    const writer = fs.createWriteStream(outputPath);
    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
      writer.on("finish", resolve);
      writer.on("error", reject);
    });
  } catch (error) {
    console.error("L·ªói khi t·∫£i ·∫£nh:", error.message);
    process.exit(1);
  }
}

// L∆∞u th√¥ng tin prompt ƒë·ªÉ t√°i s·ª≠ d·ª•ng sau n√†y
function savePromptInfo(prompt, outputPath) {
  const promptInfoPath = outputPath.replace(/\.[^/.]+$/, "_prompt.txt");
  try {
    fs.writeFileSync(promptInfoPath, prompt, "utf8");
    console.log(`ƒê√£ l∆∞u th√¥ng tin prompt v√†o: ${promptInfoPath}`);
  } catch (error) {
    console.warn(`C·∫£nh b√°o: Kh√¥ng th·ªÉ l∆∞u th√¥ng tin prompt: ${error.message}`);
  }
}

// H√†m ch√≠nh
async function main() {
  try {
    // X√°c ƒë·ªãnh style d·ª±a tr√™n options
    let style = options.style;
    if (options.vector || options.icon) {
      style = "flat";
    }

    // T·ªëi ∆∞u prompt
    const optimizedPrompt = await optimizePrompt(options.prompt);

    // C·∫£nh b√°o chi ph√≠ v√† x√°c nh·∫≠n
    const proceed = await costWarningPrompt();
    if (!proceed) {
      console.log("ƒê√£ h·ªßy t·∫°o ·∫£nh.");
      process.exit(0);
    }

    // T·∫°o ·∫£nh
    const imageUrl = await generateImageFromPrompt(
      optimizedPrompt,
      style,
      options.quality,
      options.model
    );

    // T·∫£i v√† l∆∞u ·∫£nh
    await downloadImage(imageUrl, options.output);

    // L∆∞u th√¥ng tin prompt ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
    savePromptInfo(optimizedPrompt, options.output);

    console.log(`‚úÖ ƒê√£ t·∫°o ·∫£nh th√†nh c√¥ng: ${options.output}`);

    // G·ª£i √Ω cho vi·ªác chuy·ªÉn ƒë·ªïi vector n·∫øu t·∫°o icon ho·∫∑c vector
    if (options.vector || options.icon || options.appIcon || options.uiIcons) {
      const svgPath = options.output.replace(/\.[^/.]+$/, ".svg");
      console.log(`\nƒê·ªÉ chuy·ªÉn ƒë·ªïi sang vector SVG, h√£y ch·∫°y:`);
      console.log(
        `node scripts/dalle/vectorize_image.js -i "${options.output}" -o "${svgPath}" -c 5 -s 80`
      );
    }
  } catch (error) {
    console.error("L·ªói:", error.message);
    process.exit(1);
  }
}

main();
